import org.marc4j.marc.DataField;
import org.marc4j.marc.Record;
import org.marc4j.marc.Subfield;

import java.util.LinkedHashSet;


/**
 * Returns either a Set<String> of parent (URL + colon + material type).  URLs are taken from 856$u and material
 * types from 856$3, 856$z or 856$x.  For missing type subfields the text "Unbekanntes Material" will be used.
 * Furthermore 024$2 will be checked for "doi".  If we find this we generate a URL with a DOI resolver from the
 * DOI in 024$a and set the "material type" to "DOI Link".
 *
 * @return  A, possibly empty, Set<String> containing the URL/material-type pairs.
 */
public Set getUrlsAndMaterialTypes(Record record) {
    Set urls_and_material_types = new LinkedHashSet();
    for (DataField field : record.getVariableFields("856")) {
	Subfield subfield_3 = field.getSubfield('3');
	String material_type;
	if (subfield_3 != null)
	    material_type = subfield_3.getData();
	else {
	    Subfield subfield_z = field.getSubfield('z');
	    if (subfield_z != null)
	        material_type = subfield_z.getData();
	    else {
	         Subfield subfield_x = field.getSubfield('x');
	         material_type = (subfield_x == null) ? "Unbekanntes Material" : subfield_x.getData();
	    }
        }

	for (Subfield subfield_u : field.getSubfields('u'))
	    urls_and_material_types.add(subfield_u.getData() + ":" + material_type);
    }

    // Handle DOI's:
    for (DataField field : record.getVariableFields("024")) {
	final Subfield subfield_2 = field.getSubfield('2');	   
    	print("DOI: Found 024: " + (subfield_2 == null ? null : subfield_2.getData()));
	print("DOI: " + field.getSubfields());
	if (subfield_2 != null && subfield_2.getData().equals("doi")) {
	    final Subfield subfield_a = field.getSubfield('a');
            if (subfield_a != null) {
                final String url = "https://doi.org/" + subfield_a.getData();
	        print("DOI: Found doi: " + url);
		urls_and_material_types.add(url + ":DOI");
            }
        }
    }

    return urls_and_material_types;
}
